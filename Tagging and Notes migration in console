// AO3 Tagging & Notes: localStorage to IndexedDB Migration Script
// Run this in your browser console on any AO3 page

(async function migrateAO3Data() {
    console.log('🔄 Starting AO3 data migration from localStorage to IndexedDB...');
    
    // Keys that the script uses
    const KEYS = {
        LABELS: "ao3_fic_labels",
        NOTES: "ao3_fic_notes",
        AUTHOR_NOTES: "ao3_author_notes",
        LAST_DOWNLOAD: "ao3_last_download",
        DOWNLOADED_WORKS: "ao3_downloaded_works",
        TAG_DATES: "ao3_tag_dates",
        METADATA_CACHE: "ao3_metadata_cache"
    };

    // IndexedDB helper functions
    async function initDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('AO3TaggingDB', 1);
            
            request.onerror = () => reject(request.error);
            request.onsuccess = () => resolve(request.result);
            
            request.onupgradeneeded = (event) => {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('data')) {
                    db.createObjectStore('data');
                }
            };
        });
    }

    async function saveToIndexedDB(db, key, value) {
        return new Promise((resolve, reject) => {
            const transaction = db.transaction(['data'], 'readwrite');
            const store = transaction.objectStore('data');
            const request = store.put(value, key);
            
            request.onsuccess = () => resolve();
            request.onerror = () => reject(request.error);
        });
    }

    async function checkIndexedDBExists(db, key) {
        return new Promise((resolve) => {
            const transaction = db.transaction(['data'], 'readonly');
            const store = transaction.objectStore('data');
            const request = store.get(key);
            
            request.onsuccess = () => {
                resolve(request.result !== undefined);
            };
            request.onerror = () => resolve(false);
        });
    }

    try {
        // Initialize IndexedDB
        const db = await initDB();
        console.log('✅ IndexedDB initialized');

        let migrationCount = 0;
        let skippedCount = 0;
        const results = [];

        // Check each key for data to migrate
        for (const [name, key] of Object.entries(KEYS)) {
            try {
                const localData = localStorage.getItem(key);
                
                if (localData) {
                    // Check if data already exists in IndexedDB
                    const existsInIndexedDB = await checkIndexedDBExists(db, key);
                    
                    if (!existsInIndexedDB) {
                        // Parse and migrate the data
                        const parsedData = JSON.parse(localData);
                        await saveToIndexedDB(db, key, parsedData);
                        migrationCount++;
                        
                        const dataSize = typeof parsedData === 'object' ? Object.keys(parsedData).length : 'N/A';
                        results.push(`✅ ${name}: Migrated (${dataSize} items)`);
                        console.log(`✅ Migrated ${name} (${key})`);
                    } else {
                        skippedCount++;
                        results.push(`⏭️ ${name}: Already exists in IndexedDB`);
                        console.log(`⏭️ Skipped ${name} - already exists in IndexedDB`);
                    }
                } else {
                    results.push(`❌ ${name}: No data in localStorage`);
                    console.log(`❌ No localStorage data for ${name}`);
                }
            } catch (error) {
                results.push(`❌ ${name}: Error - ${error.message}`);
                console.error(`❌ Error migrating ${name}:`, error);
            }
        }

        // Show results
        console.log('\n📊 Migration Summary:');
        console.log(`✅ Successfully migrated: ${migrationCount} datasets`);
        console.log(`⏭️ Skipped (already exists): ${skippedCount} datasets`);
        console.log('\n📋 Detailed Results:');
        results.forEach(result => console.log(result));

        if (migrationCount > 0) {
            console.log('\n🎉 Migration completed successfully!');
            console.log('Your AO3 tagging data has been moved to IndexedDB.');
            console.log('The new script version will now use this data.');
            
            // Optional: Ask if user wants to clear localStorage
            console.log('\n💡 Optional: You can now clear the old localStorage data by running:');
            console.log('clearAO3LocalStorage()');
            
            // Add the cleanup function to global scope
            window.clearAO3LocalStorage = function() {
                let cleared = 0;
                Object.values(KEYS).forEach(key => {
                    if (localStorage.getItem(key)) {
                        localStorage.removeItem(key);
                        cleared++;
                    }
                });
                console.log(`🗑️ Cleared ${cleared} items from localStorage`);
                console.log('Old localStorage data has been removed.');
            };
            
        } else if (skippedCount > 0) {
            console.log('\n✨ All data already migrated!');
            console.log('Your data is already in IndexedDB and ready to use.');
        } else {
            console.log('\n📝 No data found to migrate.');
            console.log('This might be your first time using the script, or data is stored elsewhere.');
        }

    } catch (error) {
        console.error('❌ Migration failed:', error);
        console.log('Please try again or report this error.');
    }
})();
